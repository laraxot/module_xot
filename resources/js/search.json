[[{"i":"package_description","l":":package_description","p":["Latest Version on Packagist GitHub Tests Action Status GitHub Code Style Action Status Total Downloads","This repo can be used to scaffold a Laravel package. Follow these steps to get started:","Press the \"Use template\" button at the top of this repo to create a new repo with the contents of this skeleton.","Run \"php ./configure.php\" to run a script that will replace all placeholders throughout all the files.","Have fun creating your package.","If you need help creating a package, consider picking up our Laravel Package Training video course.","This is where your description should go. Limit it to a paragraph or two. Consider adding a small example."]},{"l":"Support us","p":["We invest a lot of resources into creating best in class open source packages. You can support us by buying one of our paid products.","We highly appreciate you sending us a postcard from your hometown, mentioning which of our package(s) you are using. You'll find our address on our contact page. We publish all received postcards on our virtual postcard wall."]},{"l":"Installation","p":["You can install the package via composer:","You can publish and run the migrations with:","You can publish the config file with:","This is the contents of the published config file:","Optionally, you can publish the views using"]},{"l":"Usage"},{"l":"Testing"},{"l":"Changelog","p":["Please see CHANGELOG for more information on what has changed recently."]},{"l":"Contributing","p":["Please see CONTRIBUTING for details."]},{"l":"Security Vulnerabilities","p":["Please review our security policy on how to report security vulnerabilities."]},{"l":"Credits","p":[":author_name","All Contributors"]},{"l":"License","p":["The MIT License (MIT). Please see License File for more information."]}],[{"l":"Jigsaw Docs Starter Template","p":["This is a starter template for creating a beautiful, customizable documentation site for your project with minimal effort. You’ll only have to change a few settings and you’re ready to go.","View a preview of the docs template."]},{"l":"Installation","p":["After installing Jigsaw, run the following command from your project directory:","This starter template includes samples of common page types, and comes pre-configured with:","A fully responsive navigation bar","A sidebar navigation menu","Tailwind CSS, a utility CSS framework that allows you to customize your design without touching a line of CSS","Purgecss to remove unused selectors from your CSS, resulting in smaller CSS files","Syntax highlighting using highlight.js","A script that automatically generates a sitemap.xml file","A search bar powered by Algolia DocSearch, and instructions on how to get started with their free indexing service","A custom 404 page","Docs starter template screenshot"]},{"l":"Configuring your new site","p":["As with all Jigsaw sites, configuration settings can be found in config.php; you can update the variables in that file with settings specific to your project. You can also add new configuration variables there to use across your site; take a look at the Jigsaw documentation to learn more.","Tip: This configuration file is also where you’ll define any \"collections\" (for example, a collection of the contributors to your site, or a collection of blog posts). Check out the official Jigsaw documentation to learn more."]},{"l":"Adding Content","p":["You can write your content using a variety of file types. By default, this starter template expects your content to be located in the source/docs folder. If you change this, be sure to update the URL references in navigation.php.","The first section of each content page contains a YAML header that specifies how it should be rendered. The title attribute is used to dynamically generate HTML title and OpenGraph tags for each page. The extends attribute defines which parent Blade layout this content file will render with (e.g. _layouts.documentation will render with source/_layouts/documentation.blade.php), and the section attribute defines the Blade \"section\" that expects this content to be placed into it.","Read more about Jigsaw layouts."]},{"l":"Adding Assets","p":["Any assets that need to be compiled (such as JavaScript, Less, or Sass files) can be added to the source/_assets/ directory, and Laravel Mix will process them when running npm run dev or npm run prod. The processed assets will be stored in /source/assets/build/(note there is no underscore on this second assets directory).","Then, when Jigsaw builds your site, the entire /source/assets/ directory containing your built files (and any other directories containing static assets, such as images or fonts, that you choose to store there) will be copied to the destination build folders ( build_local, on your local machine).","Files that don't require processing (such as images and fonts) can be added directly to /source/assets/.","Read more about compiling assets in Jigsaw using Laravel Mix."]},{"l":"Building Your Site","p":["Now that you’ve edited your configuration variables and know how to customize your styles and content, let’s build the site."]}],[{"i":"#","p":["XotData"]},{"l":"XotData","p":["Sono le variabili di xra.php"]}],[{"i":"#","p":["Model Queuable Actions"]},{"l":"Model Queuable Actions"}],[{"i":"#","p":["Destroy Model with Queuable Action"]},{"l":"Destroy Action","p":["This is an example Destroy action"]}],[{"i":"#","p":["Detach Model with Queuable Action"]},{"l":"Detach Action","p":["This is an example Detach action"]}],[{"i":"#","p":["Filter Relations Model with Queuable Action"]},{"i":"filter-relations","l":"Filter Relations Action","p":["This is Filter Relations quauable action","Action File Path:"]},{"i":"what-it-does","l":"What it does:","p":["It takes three params:","the model calling the store action","the data array to store","Get the methods of the model to store"]},{"l":"How the filter works","p":["Transforms the array of data to save to a Collection(Illuminate\\Support\\Collection)","Checks if $item exists in $methods","While the third parameter (strict) is true, then it check the type of found value in array too","Then only if the attribute is a method instead of a simple property then is returned by filter","If the previously filtered model method is a relation instance then it is returned by this filter","The returned relations will be mapped.","related variable starts null","If the method $model->relation()->getRelated() esists then related get the related model of the relation."]},{"i":"it-returns-for-every-discovered-relation","l":"It returns for every discovered Relation:","p":["the relation type (belongsTo, hasMany, ecc)","the related model","the relation name (user, profile)","the relation itself"]}],[{"i":"#","p":["Store Model with Queuable Action"]},{"i":"store","l":"Store Action","p":["This is Store quauable action","Action File Path:"]},{"i":"what-it-does","l":"What it does:","p":["Checks if some data attributes belongs to any model relation","Data is validated with rules or throws a Validation error","Fill fills the model with an array of attributes.","If lang is not set in data;","If some attributes belong to relations, then it pass them to the related queuable action to store.","If there is a fillable field named lang;","If user_id field is fillable in this table","If user_id is not set in data","if user_id is not the Primary Key of this model","It takes three params:","Send session flash messages to confirm that the model was created, and returns this model itself.","the data array to store","the model calling the store action","The model passed is filled with validated data","the rules needed to validate data","Then data get lang from the website Locale configuration.","Then data get user_id from the current authenticated user"]}],[{"i":"#","p":["Update Model with Queuable Action"]},{"l":"Update Action","p":["This is an example Update action"]}],[{"i":"#","p":["Modulo Test"]},{"i":"modulo-Test","l":"Modulo Test","p":["Modulo test serve per mettere azioni da testare.","Quando le azioni andranno bene verranno spostate nel modulo giusto.","Ce n’è uno per ogni base e fa parte della repo della base. Non va in una repository \"a parte\""]}],[{"i":"#","p":["Services"]},{"l":"Services"}],[{"i":"#","p":["Handle models with ModelService"]},{"l":"ModelService"},{"l":"Returns the instance of the class","p":["Example"]},{"l":"Set the property model from the model instance","p":["Example"]},{"l":"Set the property model from the class name with namespace","p":["Example"]},{"i":"uses-the-model-property-and-search-the-passed-data-in-its-relationships","l":"Uses the model property and search the passed $data in its relationships","p":["Example","Get class methods inside model property","Filter methods data instead of simple properties data","If the array key is not a strings returns error","Set $rows as the model relation to $k (the key)","Initialize $related to null","If $rows has the method getRelated, sets $related to the model of its relationship","Returns the:","relationship type (BelongsTo, HasMany, ManyToMany, ecc..)","relation instance","related model","related attributes","name of the relation (user, profile, relatedModelName, ecc)","relationship itself"]},{"i":"returns-the-class-associated-with-its-name-morphmapped","l":"Returns the class associated with its name (morphmapped)","p":["Example","Reads morph_map value from the morph_map.php configuration, inside every domain","Serch the name of the $model class inside morph_map.php array (in this case is PressPost)","If it doesn't fine anything it sets $post_type to the snake case name of the setted $this->model (PressPost)","Set the morph map for polymorphic relation, and return an array","Returns the previous name => class association"]},{"l":"Get relation names from model property","p":["Example","The reflection class is used to get information about the current state of the application.","It's called reflection, because it looks at itself, and can tell you information about the program your running, at runtime.","Get the methods from the reflected $model class","Get the doc comment if it exists, otherwise false","Get the method name (inside foreach)","If the number of required parameters for this methos are Zero","If the class of this method is $model","If the method's $doc isn't false and strpos has the substring \\Relations\\","Then the array $relations adds the method name ($method->getName())"]},{"l":"Get relationships from model","p":["Example","Gets the reflection class from $model","Gets the public methods from reflection class, and iterates on themù","If the current function name (getRelationships) is equal to the method name","OR If the method has more then 0 parameters","OR if the method class name is different then model class name","Then the cycle stops and continue the next iteration"]}],[{"i":"#","p":["Handle panels with PanelService"]},{"l":"PanelService"}],[{"i":"#","p":["Handle profiles with ProfileService"]},{"l":"ProfileService"}],[{"i":"#","p":["Configure Algolia DocSearch with the Jigsaw docs starter template"]},{"l":"Algolia DocSearch","p":["This starter template includes support for DocSearch, a documentation indexing and search tool provided by Algolia for free. To configure this tool, you’ll need to sign up with Algolia and set your API Key and index name in config.php. Algolia will then crawl your documentation regularly, and index all your content.","Get your DocSearch credentials here.","Once the docsearchApiKey and docsearchIndexName values are set in config.php, the search field at the top of the page is ready to use.","To help Algolia index your pages correctly, it's good practice to add a unique id or name attribute to each heading tag ( h1, h2, etc.). By doing so, a user will be taken directly to the appropriate section of the page when they click a search result."]},{"i":"algolia-adding-custom-styles","l":"Adding Custom Styles","p":["If you'd like to customize the styling of the search results, Algolia exposes custom CSS classes that you can modify:","For more details, visit the official Algolia DocSearch documentation."]}],[{"i":"#","p":["Custom 404 pages with Jigsaw docs starter template"]},{"l":"Custom 404 Page","p":["This starter template includes a custom 404 Not Found error page, located at /source/404.blade.php. To preview the 404 page, you can visit /404 in your browser.","Depending on where your site is hosted, you may need to configure your server to use the custom 404 page. For more details, visit the Jigsaw documentation about configuring a custom 404 page."]}],[{"i":"#","p":["Custom Relation"]},{"i":"custom-relation","l":"Come funzionano le custom relations?","p":["Vediamo prima come funziona con le relazioni standard di laravel."]},{"i":"dobbiamo-mettere-in-relazione-i-modelli-contract--habitantcontract--habitant--person","l":"Dobbiamo mettere in relazione i modelli Contract > HabitantContract > Habitant > Person","p":["Contract ha relazione ManyToMany con Habitant, passando per la Pivot HabitantContract.","Habitant ha relazione HasOne con Person."]},{"i":"quello-che-voglio-è","l":"Quello che voglio è:","p":["Vedere tutte le persone nel sistema","Vedere per ogni persona la colonna con l'array degli eventuali contratti attivi.","Potremmo utilizzare la relazione HasManyTrought, ma siamo a 4 livelli di profondità, quindi non si può.","Potremmo fare un ciclo per ogni persona e leggere i contract, ma sarebbe lento."]},{"i":"lalternativa-migliore-è-fare-le-relazioni-customizzate","l":"L'alternativa migliore è fare le Relazioni Customizzate!","p":["Vediamo come:","Nel modello person creiamo la relazione, come tutte le altre, ma con il nome della relazione personalizzata:","ActiveContractsRelation sarà quindi il nome della relazione personalizzata che leggerà i contratti attivi per ogni persona passando per Habitant.","In Laravel esiste una relazione di base che viene utilzzata da tutte le altre relazioni, che è Illuminate\\Database\\Eloquent\\Relations\\Relation","Quindi andiamo a vedere com'è fatta ed estendiamo la classe:","Inseriamo un costruttore all'interno della classe.","Nel costruttore passiamo il modello Person ($parent - il modello related)","Nella classe parent (Relation) passiamo l'Eloquent Builder o il modello Contract (per leggere i contratti attivi)","Passare Models\\Contract oppure Database\\Eloquent\\Builder serve per facilitare l'auto completamento dell'IDE","Quindi in pratica la relazione interrogherà il modello Contract e utilizzerà il modello Person come genitore."]},{"i":"ora-bisogna-costruire-la-query-della-relazione","l":"Ora bisogna costruire la query della relazione.","p":["E' qui che entra in gioco il metodo addConstraint. Serve per configurare la query di base. Imposterà la nostra query di relazione in modo specifico per le nostre esigenze.","Questo è il luogo in cui sarà contenuta la maggior parte delle regole:","Vogliamo che vengano visualizzati solo i contratti attivi","Vogliamo caricare solo i contratti attivi che appartengono a una persona specificata (il $parent della nostra relazione)","Potremmo voler caricare alcune altre relazioni, ma ne parleremo più avanti.","Ecco come sarà per ora il metodo addConstraints:","A questo punto invece di fare una query per persona per caricare i suoi contratti, stiamo facendo una query per caricare tutti i contratti e collegare questi contratti alle persone corrette in seguito. Per questo si usa l’ Eager Constraint."]},{"l":"Vediamo come creare il metodo addEagerConstraints","p":["Partiamo con il dire che addEagerConstraints ci consente di modificare la query per pre-caricare tutti i contratti relativi a un insieme di persone"]},{"l":"Il metodo initRelation","p":["Il metodo initRelation serve ad iniziare una relazione vuota, prima di riempirla facendo le query sopra."]},{"l":"Il metodo match","p":["Ora bisogna collegare insieme tutte le persone con i contratti, ed è qui che entra in gioco il metodo match.","Siccome però habitants non c'è nella relazione nel metodo addEagerConstraints, quindi non possiamo sapere i person_id andiamo ad aggiungerlo, e leggiamo solo i dati dalla tabella Contracts, ignorando i dati delle altre tabelle della query join.","A questo punto basta fare:"]},{"i":"come-fare-la-stessa-relazione-con-customrelation","l":"Come fare la stessa relazione con CustomRelation?"}],[{"i":"#","p":["Getting started with Jigsaw's docs starter template is as easy as 1, 2, 3."]},{"l":"Getting Started","p":["This is a starter template for creating a beautiful, customizable documentation site for your project with minimal effort. You’ll only have to change a few settings and you’re ready to go."]},{"i":"getting-started-configuration","l":"Configuration","p":["As with all Jigsaw sites, configuration settings can be found in config.php; you can update the variables in that file with settings specific to your project. You can also add new configuration variables there to use across your site; take a look at the Jigsaw documentation to learn more.","Tip: This configuration file is also where you’ll define any \"collections\" (for example, a collection of the contributors to your site, or a collection of blog posts). Check out the official Jigsaw documentation to learn more."]},{"i":"getting-started-adding-content","l":"Adding Content","p":["You can write your content using a variety of file types. By default, this starter template expects your content to be located in the source/docs folder. If you change this, be sure to update the URL references in navigation.php.","Read more about navigation.","The first section of each content page contains a YAML header that specifies how it should be rendered. The title attribute is used to dynamically generate HTML title and OpenGraph tags for each page. The extends attribute defines which parent Blade layout this content file will render with (e.g. _layouts.documentation will render with source/_layouts/documentation.blade.php), and the section attribute defines the Blade \"section\" that expects this content to be placed into it.","Read more about Jigsaw layouts."]},{"i":"getting-started-adding-assets","l":"Adding Assets","p":["Any assets that need to be compiled (such as JavaScript, Less, or Sass files) can be added to the source/_assets/ directory, and Laravel Mix will process them when running npm run dev or npm run prod. The processed assets will be stored in /source/assets/build/(note there is no underscore on this second assets directory).","Then, when Jigsaw builds your site, the entire /source/assets/ directory containing your built files (and any other directories containing static assets, such as images or fonts, that you choose to store there) will be copied to the destination build folders ( build_local, on your local machine).","Files that don't require processing (such as images and fonts) can be added directly to /source/assets/.","Read more about compiling assets in Jigsaw using Laravel Mix."]},{"i":"getting-started-building-your-site","l":"Building Your Site","p":["Now that you’ve edited your configuration variables and know how to customize your styles and content, let’s build the site."]}],[{"i":"#","p":["Modulo Xot"]},{"i":"modulo-Xot","l":"Modulo Xot","p":["Modulo principale con cui si può utilizzare la struttura multitenant del progetto. Senza di esso tutta l'organizzazione della struttura della base su cui si lavora non può funzionare.","E' la libreria di estensione di tutte le altre librerie."]}],[{"i":"#","p":["Building a navigation menu for your site"]},{"l":"Navigation","p":["The navigation menu in the left-hand sidebar is defined using an array in navigation.php. Nested pages can be added by using the children associative array."]}],[{"l":"Illustration Credits","p":["The illustrations in this directory are sourced from Stories by Freepik.","Freepik offers hundreds of free, high quality illustrations you can use in your projects. You can view them all here:","https://stories.freepik.com/","Make sure to view their licensing terms to make sure you are attributing the image authors correctly when using their assets."]}],[{"l":"Changelog","p":["All notable changes to :package_name will be documented in this file."]},{"i":"100---202x-xx-xx","l":"1.0.0 - 202X-XX-XX","p":["initial release"]}],[{"l":"LICENSE","p":["The MIT License (MIT)","Copyright (c) :vendor_name author@domain.com","Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."]}]]