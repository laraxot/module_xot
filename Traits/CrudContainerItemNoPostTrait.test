<?php

namespace Modules\Xot\Traits;

//use Artisan;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
//per il w

//-------- services -----
use Modules\Blog\Models\Post;
//-------- models ------
//------- services -------
use Modules\Theme\Services\ThemeService;
//use Modules\Xot\Services\PanelService;
//use Modules\Xot\Services\PolicyService;
use Modules\Xot\Services\StubService;
use Modules\Xot\Services\PanelService as Panel;


trait CrudContainerItemNoPostTrait {

   // //public $rows;

    public function index(Request $request, $container, $item) {
        /*
        $params = optional(\Route::current())->parameters();
        if (false === $container) {
            $home_view = $params['module'].'::admin.index';
            if (\View::exists($home_view)) {
                return ThemeService::view($home_view);
            } else {
                return ThemeService::view('xot::admin.home');
            }
        }
        if (false === $item) {
            $row = self::getXotModel($container);
            $rows = $row;
        } else {
            $types = Str::camel(Str::plural($container));
            $rows = $item->$types();
            $row = $rows->getRelated();
        }
        $panel = StubService::getByModel($row, 'panel', true);
        $policy = StubService::getByModel($row, 'policy', true);
        $rows = $panel->indexRows($request, $rows);
        if ($panel->force_exit) {
            return $panel->out;
        }
        $panel->setRow($row);
        $rows = $rows->paginate(20);
        $view_params = [
            'rows' => $rows,
            'row' => $row,
            '_panel' => $panel,
        ];

        return ThemeService::view()->with($view_params);
        */
        if (false === $item) {
            $row = self::getXotModel($container);
            $rows = $row;
        } else {
            $types = Str::camel(Str::plural($container));
            $rows = $item->$types();
            $row = $rows->getRelated();
        }
        //$rows = $rows->paginate(20);
        static::$rows=$rows;

        return $row;
    }

    public function create(Request $request, $container, $item) {
        $types = Str::camel(Str::plural($container));
        if (is_object($item)) { //l'oggetto figlio potrebbe avere un modello diverso
            $rows = $item->$types();
            $row = $rows->getRelated();
        } else {
            $rows = null;
            $row = xotModel($container);
        }
        $rows = $rows->paginate(20);
        static::$rows=$rows;
        return $row;

        /*
        $panel = StubService::getByModel($row, 'panel');
        $panel->setRow($row);
        $panel->setRows($rows);

        return ThemeService::view()
            ->with('row', $row)
            ->with('_panel', $panel)
            ;
        */
    }

    public function edit(Request $request, $container, $item) {
        /*
        $panel = StubService::getByModel($item, 'panel');
        $types = Str::camel(Str::plural($container));
        $route_params = optional(\Route::current())->parameters();
        list($containers, $items) = params2ContainerItem($route_params);
        if (count($items) > 1) {
            $second_last_item = $items[count($items) - 2];
            $rows = $second_last_item->$types();
            $panel->setRows($rows);
        }
        $panel->setRow($item);

        return ThemeService::view(['panel' => $panel, 'row' => $item])
                ->with('row', $item)
                ->with('_panel', $panel)
                ;
        */
        return $item;
    }

    public function update(Request $request, $container, $item) {
        $data = $request->all();
        $row = $item;
        $panel=Panel::get($row);
        $ris = $row->update($data);
        //$row->post()->save($data); //save vuole un oggetto
        /* ----
        if (method_exists($row, 'post')) {
            if (null == $row->post) {
                $row->post()->create($data);
            } else {
                $row->post->update($data);
            }
        }
        */
        $this->manageRelationships(['model' => $item, 'data' => $data, 'act' => 'update']);
        \Session::flash('status', 'aggiornato! ['.$row->getKey().']!'); //.implode(',',$row->getChanges())
        return $item;

        /* sono vecchio mi serve per ricordare cosa facevo prima
        if ($request->ajax()) {
            return json_encode(['msg' => 'ok']);
        } else {
            //return ThemeService::action($request, $row);
            return ThemeService::view(['panel' => $panel, 'row' => $item])
                ->with('row', $item)
                ->with('_panel', $panel)
                ;
        }
        */
    }

    /**
     * https://hackernoon.com/eloquent-relationships-cheat-sheet-5155498c209
     * https://laracasts.com/discuss/channels/eloquent/cleanest-way-to-save-model-and-relationships.
     */
    public function manageRelationships(array $params){
        //dddx($params);
        extract($params);
        $methods = get_class_methods($model);
        /*
        if(!is_array($methods)){
            $methods=[];
        }
        */
        $data1 = collect($data)->filter(function ($item, $key) use ($methods) {
            return in_array($key, $methods);
        })->map(function ($v, $k) use ($model) {
            return (object) [
                'relationship_type' => class_basename($model->$k()),
                'data' => $v,
                'name' => $k,
            ];
        })->all();

        foreach ($data1 as $k => $v) {
            $func = $act.'Relationships'.$v->relationship_type; //updateRelationshipsMorphOne
            //$this->$func(['model'=>$model,'name'=>$v->name,'data'=>$v->data]);
            $parz = array_merge($params, ['model' => $model, 'name' => $v->name, 'data' => $v->data]);
            self::$func($parz);
        }

        if (isset($data['pivot'])) {
            $func = $act.'Relationships'.'Pivot'; //updateRelationshipsMorphOne
            //$this->$func(['model'=>$model,'name'=>'pivot','data'=>$data['pivot']]);
            //self::$func(['model'=>$model,'name'=>'pivot','data'=>$data['pivot']]);
            $params['name'] = 'pivot';
            $params['data'] = $data['pivot'];
            self::$func($params);
        }
    }

    public function updateRelationshipsHasOne(array $params){
        extract($params);
        $rows = $model->$name();
        if ($rows->exists()) {
            if(!is_array($data)){
               //variabile uguale alla relazione
            }else{
                $model->$name()->update($data);
            }
        } else {
            $this->storeRelationshipsHasOne($params);
        }
    }

    public function updateRelationshipsBelongsTo(array $params){
        extract($params);
        $rows = $model->$name();
        if ($rows->exists()) {
            //$model->$name()->update($data);
            $model->$name->update($data);

        } else {
            $this->storeRelationshipsBelongsTo($params);
        }
    }

    public function updateRelationshipsMorphOne(array $params){
        extract($params);
        $model->$name()->update($data);
    }

    public function updateRelationshipsMorphToMany(array $params){
        extract($params);
        //$res=$model->$name()->syncWithoutDetaching($data);
        foreach ($data as $k => $v) {
            if(!is_array($v)){
               $v=[];
            }
            if(!isset($v['pivot'])){
                $v['pivot']=[];
            }
            $res = $model->$name()->syncWithoutDetaching([$k => $v['pivot']]);
            $model->$name()->touch();
        }

        //dddx($res);
        /*"attached" => []
  "detached" => []
  "updated" => array:2 [â–¼
    0 => 2
    1 => 4
    //*/
    }

    public function updateRelationshipsPivot(array $params){
        extract($params);
        $model->$name->update($data);
    }

    public function storeRelationshipsPivot(array $params){
        /*
        extract($params);
        $types=Str::plural($container);
        //dddx($params);
        //$model->$name()->create($data);
        $k=$model->getKey();
        $res=$item->$types()->update($model,$data);
        //dddx($res);
        */
    }

    public function storeRelationshipsHasOne(array $params){
        extract($params);
        $rows = $model->$name();
        //debug_getter_obj(['obj'=>$rows]);
        $related = $rows->create($data);
        if (! $model->$name()->exists()) {//collegamento non riuscito
            $pk_local = $rows->getLocalKeyName();
            $pk_fore = $rows->getForeignKeyName();
            $data1 = [$pk_local => $related->$pk_fore];
            $model->update($data1);
        }
    }

    public function storeRelationshipsBelongsTo(array $params){
        extract($params);
        $rows = $model->$name();
        //debug_getter_obj(['obj'=>$rows]);
        $related = $rows->create($data);
        if (! $model->$name()->exists()) {//collegamento non riuscito
            $pk_own = $rows->getOwnerKeyName();
            $pk_fore = $rows->getForeignKeyName();
            $data1 = [$pk_fore => $related->$pk_own];
            $model->update($data1);
        }
    }

    public function formatData(array $params){
        extract($params);
        $panel = StubService::getByModel(new $class(), 'panel');
        //dddx($panel->fields());
        //dddx($data);
        $fields = collect($panel->fields())->filter(function ($item) use ($data) {
            return in_array($item->name, array_keys($data));
        })->all();
        //dddx($fields);
        return $data;
    }

    public function store(Request $request, $container, $item) {
        $data = $request->all();

        if (! isset($data['lang'])) {
            $data['lang'] = \App::getLocale();
        }
        $types = Str::camel(Str::plural($container));
        if (is_object($item)) { //l'oggetto figlio potrebbe avere un modello diverso
            $rows = $item->$types();
            $related = $rows->getRelated();
            //$related_class=get_class($related);
            //$row=new $related_class;
            $row = $related;
        } else {
            $rows = null;
            $row = xotModel($container);
        }

        $item_new = $row->fill($data);
        $item_new->save();
        //echo '<pre>'.print_r($data,true).'</pre>';
        //echo '<pre>'.print_r($row->getFillable(),true).'</pre>';
        //echo '<pre>'.print_r($item_new->toArray(),true).'</pre>';
        //dddx($item_new);

        if (false !== $item) {
            if (! is_object($item)) {
                dddx($item);
            }
            $pivot_data = [];
            if (isset($data['pivot'])) {
                $pivot_data = $data['pivot'];
            }
            $tmp = $item->$types()->save($item_new, $pivot_data);
        }
        /*
        if (method_exists($item_new, 'post')) { // mi evita delle query dopo
            if (isset($data['post'])) {
                $data = array_merge($data, $data['post']); //forzatura
            }

            $data = $this->formatData(['data' => $data, 'class' => Post::class]);
            if (! isset($data['title'])) {
                $data['title'] = class_basename($item_new).' '.$item_new->getKey();
            }
            //dddx($data);
            $item_new->post()->create($data);
        }
        */
        $panel = StubService::getByModel($item_new, 'panel');



        //*/
        self::manageRelationships(['model' => $item_new, 'data' => $data, 'act' => 'store', 'container' => $container, 'item' => $item, 'rows' => $rows]);
        //*
        if (method_exists($panel, 'storeCallback')) {
            $item_new = $panel->storeCallback(['row' => $item_new, 'data' => $data]);
        }
        //*/

        \Session::flash('status', 'aggiornato! ['.$row->getKey().']!'); //.implode(',',$row->getChanges())

        //return ThemeService::action($request, $row);
        /*
        $panel=Panel::get($item_new);


        return ThemeService::view(['panel' => $panel, 'row' => $item_new])
                ->with('row', $item_new)
                ->with('_panel', $panel)
                ;
        */
        return $item_new;
    }

    public function storeRelationshipsMorphOne(array $params){
        extract($params);
        if (! isset($data['lang'])) {
            $data['lang'] = \App::getLocale();
        }
        if ($model->$name()->exists()) {
            $model->$name()->update($data);
        } else {
            $model->$name()->create($data);
        }
    }

    public function storeRelationshipsMorphToMany(array $params){
        extract($params);
        /*
            name= nome relazione
        */
        /*
        dddx($params);
        $model_linked_name=Str::singular($name);
        $model_linked=$this->getXotModel($model_linked_name);
        $row_linked=$model_linked->where($data)->first();
        dddx($row_linked);
        $model->$name()->save($row_linked);
        */
        foreach ($data as $k => $v) {
            if (is_array($v)) {
                if (! isset($v['pivot'])) {
                    $v['pivot'] = [];
                }
                if (! isset($v['pivot']['user_id']) && isset($model->user_id) ) {
                    $v['pivot']['user_id'] =$model->user_id;
                }
                if (! isset($v['pivot']['user_id']) && \Auth::check()) {
                    $v['pivot']['user_id'] = \Auth::user()->user_id;
                }
                /**
                * syncWithoutDetaching fa una select a vuoto ma funziona
                *
                **/
                $model->$name()->syncWithoutDetaching([$k => $v['pivot']]);
            } else {
                /*
                $rows1=$model->$name();
                $related=$rows1->getRelated();
                dddx($related);
                //dddx($params);
                */
                //$model->$name()->attach()
            }
        }
    }

    public function show(Request $request, $container, $item) {
        /*
        $data=$request->all();
        $panel = StubService::getByModel($item, 'panel');
        if (is_object($item)) {
            $panel->callAction($item, $request->_act);
            if ($panel->force_exit) {
                return $panel->out;
            }
        }
        if(isset($data['format'])){
            $format=$data['format'];
            if($format=='json'){
                return $item->toJson();
                //\Modules\Xot\Transformers\JsonResource::withoutWrapping();
                //return new \Modules\Xot\Transformers\JsonResource($item);
            }
        }


        return ThemeService::view()
            ->with('row', $item)
            ->with('_panel', $panel)
            ;
        */
        return $item;
    }

    public function indexAttach(Request $request, $container, $item) {
        if ('POST' == $request->getMethod()) {
            return $this->indexAttachSave($request, $container, $item);
        }
        $types = Str::camel(Str::plural($container));
        if (is_object($item)) {
            $rows = $item->$types();
            $pivot_class = $rows->getPivotClass();
            $pivot = new $pivot_class();
            $panel = StubService::getByModel($pivot, 'panel', true);
            $panel->pivot_key_names = [];
            $panel->pivot_key_names[] = $rows->getForeignPivotKeyName();
            if (method_exists($rows, 'getMorphType')) {
                $panel->pivot_key_names[] = $rows->getMorphType();
            }
            ///*
            return ThemeService::view()
                ->with('row', $pivot)
                ->with('_panel', $panel)
            ;
        }
        //return $this->create($request,$container,$item); //crea collegamento ..
    }

    public function indexAttachSave(Request $request, $container, $item) {
        $data = $request->all();
        $types = Str::camel(Str::plural($container));
        $related_pivot_key_name = $item->$types()->getRelatedPivotKeyName();
        $related_pivot_key_value = $data[$related_pivot_key_name];
        $rows = $item->$types()->attach($related_pivot_key_value, $data); //forse dovremmo aggiungere il tipo di relazione
        //dddx($data);
        /*
        if(is_object($item)){
            $rows=$item->$types();
            $pivot_class=$rows->getPivotClass();
            $foreign_pivot_key_name=$rows->getForeignPivotKeyName();
            $pivot=new $pivot_class;
            $pivot->
        };
        dddx('senza item ?');
        */
        return ThemeService::action($request, $item);
    }

    public function indexEdit(Request $request, $container, $item) {
        //dddx($request->getMethod());
        if ('POST' == $request->getMethod()) {
            //return  //
            $this->indexUpdate($request, $container, $item);
            \Session::flash('status', 'Successo ! ');
            if ($request->ajax()) {
                return json_encode(['msg' => 'ok']);
            }
        }

        return $this->index($request, $container, $item);
        //return self::index($request,$container,$item);
    }

    public function indexUpdate(Request $request, $container, $item) {
        $data = $request->all();
        /* --- da cambiare js --
        $types = Str::camel(Str::plural($container));
        if (isset($data[$types]['from']) || isset($data[$types]['to'])) {
            $this->saveMultiselectTwoSides($request, $container, $item);
        }
        */
        $this->manageRelationships(['model' => $item, 'data' => $data, 'act' => 'indexUpdate']);
    }

    public function indexUpdateRelationshipsMorphToMany(array $params){
        extract($params);
        //dddx($data);
        /*
        $user_id=\Auth::user()->user_id;
        $data=collect($data)->map(function($item) use($user_id){
            $item['user_id']=$user_id;
            return $item;
        })->all();
        $res=$model->$name()->syncWithoutDetaching($data);
        //*/
        foreach ($data as $k => $v) {
            if (is_array($v)) {
                if (! isset($v['pivot'])) {
                    $v['pivot'] = [];
                }
                if ((! isset($v['pivot']['user_id']) || $v['pivot']['user_id']=='') && \Auth::check()) {
                    $v['pivot']['user_id'] = \Auth::user()->user_id;
                }
                $model->$name()->syncWithoutDetaching([$k => $v['pivot']]);
            } else {
                dddx('to do-- ovvero da fare');
                /*
                $rows1=$model->$name();
                $related=$rows1->getRelated();
                dddx($related);
                //dddx($params);
                */
                //$model->$name()->attach()
            }
        }
    }

    public function indexUpdateRelationshipsBelongsToMany(array $params){
        extract($params);
        if (isset($data['from']) || isset($data['to'])) {
            $this->saveMultiselectTwoSides($params);
            $data['from']=[];unset($data['from']);
            $data['to']=[];unset($data['to']);
        }
    }

    public function saveMultiselectTwoSides(array $params){ //passo request o direttamente data ?
        extract($params);

        //$data = $request->all();
        //$types = Str::camel(Str::plural($container));

        //$items = $item->$types();
        $items=$model->$name();
        //getPivotAccessor
        //getPivotClass
        //dddx($items->pivot());
        //dddx($items->getPivotClass());//Illuminate\Database\Eloquent\Relations\Pivot
        //Modules\LU\Models\AreaAdminArea  solo se lo ficco con lo Using
        //dddx(get_class_methods($items));
        //dddx(class_basename($items));//BelongsToMany
        //$container_obj = $this->getXotModel($container);
        $container_obj = $model;
        $items_key = $container_obj->getKeyName();
        $items_0 = $items->get()->pluck($items_key);
        if (! isset($data['to'])) {
            $data['to'] = [];
        }
        $items_1 = collect($data['to']);
        $items_add = $items_1->diff($items_0);
        $items_sub = $items_0->diff($items_1);
        $items->detach($items_sub->all());
        /* da risolvere Column not found: 1054 Unknown column 'related_type' liveuser_area_admin_areas */
        try {
            $items->attach($items_add->all(), ['related_type' => $container]);
        } catch (\Exception $e) {
            $items->attach($items_add->all());
        }
        $status = 'collegati ['.\implode(', ', $items_add->all()).'] scollegati ['.\implode(', ', $items_sub->all()).']';
        \Session::flash('status', $status);
    }

    //*
    public function getXotModel($name) { //spostare in helper ?
        $model = Tenant::config('xra.model.'.$name);
        //dddx($model);
        if (null == $model) {
            echo '<h3>not exists ['.$name.'] on config xra.model</h3>';
            dddx(config('xra.model'));
        }
        $row = new $model();

        return $row;
    }

    //*/

    public function detach(Request $request, $container, $item) {
        $item->pivot->delete(); // da aggiungere pivot_id
        $status = 'scollegato';
        \Session::flash('status', $status);
    }

    //end detach

    public function destroy(Request $request, $container, $item) {
        $item->delete(); // da aggiungere pivot_id
        $status = 'eliminato';
        \Session::flash('status', $status);
    }

    //end detach
}//end class
