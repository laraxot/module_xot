<?php

namespace Modules\Xot\Models\Panels;

use Carbon\Carbon;
use Collective\Html\FormFacade as Form;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\View;
//----------  SERVICES --------------------------
use Illuminate\Support\Str;
use Modules\FormX\Services\FormXService;
use Modules\Theme\Services\ThemeService;
use Modules\Xot\Services\ChainService;
use Modules\Xot\Services\HtmlService;
use Modules\Xot\Services\ImageService;
use Modules\Xot\Services\ImportService;
use Modules\Xot\Services\PanelService as Panel;
use Modules\Xot\Services\RouteService;
use Modules\Xot\Services\StubService;
use Yajra\DataTables\Facades\DataTables;

abstract class XotBasePanel {
    public $out = null;
    public $force_exit = false;
    public $msg = 'msg from panel';
    public $row = null;
    public $rows = null;
    public $parent = null;
    //protected static $model;

    public function __construct($model = null) {
        $this->row = $model;
    }

    public function setRow($row) {
        $this->row = $row;

        return $this;
    }

    public function setRows($rows) {
        $this->rows = $rows;

        return $this;
    }

    public function initRows() {
        $this->rows = $this->rows();
        $this->rows = $this->rows;

        return $this;
    }

    public function setParent($parent) {
        $this->parent = $parent;

        return $this;
    }

    public function getParent() {
        return $this->parent;
    }

    public function getParents() {
        /*
        $curr = $this;
        $parents = [];
        while (null != $curr) {
            $parents[] = $curr;
            $curr = $curr->getParent();
        }

        return $parents;
        */

        $parents = collect([]);
        $panel_curr = $this;

        while (null != $panel_curr->getParent()) {
            $parents->prepend($panel_curr->getParent());
            $panel_curr = $panel_curr->getParent();
        }

        return $parents;
    }

    public function findParentType($type) {
        return collect($this->getParents())->filter(
            function ($item) use ($type) {
                return $type == $item->postType();
            }
        )->first();
    }

    public function optionId(object $row) {
        return $row->getKey();
    }

    public function setItem($guid) {
        $model = $this->row;
        $rows = $this->rows;
        $pk = $model->getRouteKeyName();
        $pk_full = $model->getTable().'.'.$pk;

        if ('guid' == $pk) {
            $pk_full = 'guid';
        } // pezza momentanea

        $value = Str::slug($guid); //retrocompatibilita'
        if ('guid' == $pk_full) {
            $rows = $rows->whereHas('post', function (Builder $query) use ($value) {
                $query->where('guid', $value);
            });
        } else {
            $rows = $rows->where([$pk_full => $value]);
        }
        $this->row = $rows->first();
    }

    //funzione/flag da settare a true ad ogni pannello/modello che abbia le traduzioni
    public function hasLang() {
        return false;
    }

    public function setLabel($label) {
        $model = $this->row;
        $res = $model::whereHas(
            'post',
            function (Builder $query) use ($label) {
                $query->where('title', 'like', $label);
            }
        )->first();
        if (is_object($res)) {
            return $res;
        }
        $me = $model->create();
        // dddx([$me, $me->getKey()]);
        $post = $model->post()->create(
            [
                //'post_id' => $me->getKey(),
                'title' => $label,
                'lang' => \App::getLocale(),
            ]
        );
        if (null == $post->post_id) {
            $post->post_id = $me->getKey();
            $post->save();
        }

        return $me;
    }

    /**
     * on select the option label.
     */
    public function optionLabel(object $row):string {
        return $row->matr.' ['.$row->email.']['.$row->ha_diritto.'] '.$row->cognome.' '.$row->cognome.' ';
    }

    public function optionsSelect() {
        $opts = [];
        $rows = $this->rows;
        if (null == $rows) {
            $rows = $this->options();
        }

        foreach ($rows as $row) {
            $id = $this->optionId($row);
            $label = $this->optionLabel($row);

            $opts[$id] = $label;
        }

        return $opts;
    }

    public function options($data = null) {
        if (null == $data) {
            $data = request()->all();
        }

        return $this->rows($data)->get();
    }

    public function optionsTree($data = null) {
        if (null == $data) {
            $data = request()->all();
        }
        $rows = $this->rows($data)->get();
        $primary_field = $this->row->getKeyName();
        $c = new ChainService($primary_field, 'parent_id', 'pos', $rows);
        $options = collect($c->chain_table)->map(
            function ($item) {
                $label = str_repeat('------', $item->indent + 1).$this->optionLabel($item);

                return [
                    'id' => $this->optionId($item),
                    'label' => $label,
                ];
            }
        )->pluck('label', 'id')
            ->prepend('Root', 0)
            ->all();

        return $options;
    }

    public function optionIdName() {
        return $this->row->getKeyName();
    }

    public function optionLabelName() {
        return 'matr';
    }

    public function search():array {
        return [];
    }

    public function orderBy() {
        return [];
    }

    /*
    public function fields():array{
        return [];
    }
    //*/

    public function rules(array $params = []) {
        $act = '';
        extract($params);
        if ('' == $act) {
            $route_action = \Route::currentRouteAction();
            $act = Str::after($route_action, '@');
        }
        switch ($act) {
            case 'store':
                $fields = $this->getFields(['act'=>'create']);
                break;
            case 'update':
                $fields = $this->getFields(['act'=>'edit']);
                break;
            default:
                $fields = $this->fields();
                break;
        }
        $act = request()->input('_act');
        if ('' != $act) {
            $fields = collect($fields)->filter(
                function ($item) use ($act) {
                    if (! isset($item->except)) {
                        $item->except = [];
                    }

                    return ! in_array($act, $item->except);
                }
            )->all();
        }

        //dddx($fields);

        $rules = collect($fields)->map(
            function ($item) {
                if (! isset($item->rules)) {
                    $item->rules = '';
                }
                if ('pivot_rules' == $item->rules) {
                    $rel_name = $item->name;
                    $pivot_class = with(new $this::$model())
                        ->$rel_name()
                        ->getPivotClass();
                    $pivot = new $pivot_class();
                    $pivot_panel = StubService::getByModel($pivot, 'panel', true);
                    //dddx('preso ['.$pivot_class.']['.get_class($pivot_panel).']');
                    $pivot_rules = collect($pivot_panel->rules())
                        ->map(
                            function ($pivot_rule_val, $pivot_rule_key) use ($item) {
                                $k = $item->name.'.*.pivot.'.$pivot_rule_key;

                                return [$k => $pivot_rule_val];
                            }
                        )->collapse()->all();

                    return $pivot_rules;
                }

                return [$item->name => $item->rules];
            }
        )->collapse()
            ->all();

        return $rules;
    }

    public function pivotRules(array $params){
        extract($params);
    }

    public function rulesMessages() {
        $lang = app()->getLocale();
        $rules_msg_fields = collect($this->fields())->filter(function ($value, $key) use ($lang) {
            return isset($value->rules_messages) && isset($value->rules_messages[$lang]);
        })
            ->map(function ($item) use ($lang) {
                $tmp = [];
                /*
            * togliere la lang dai messaggi usare la stringa come id di validazione
            * se la traduzione non esiste, restituire la stringa normale
            **/
                foreach ($item->rules_messages[$lang] as $k => $v) {
                    $tmp[$item->name.'.'.$k] = $v;
                }

                return $tmp;
            })
            ->collapse()
            ->all();
        $mod = Str::before(Str::after(static::$model, 'Modules\\'), '\\');
        $mod = strtolower($mod);
        $name = Str::snake(class_basename(static::$model));
        $trans_ns = $mod.'::'.$name.'__rules_messages';
        //dddx($trans_ns);//food::restaurant_owner__rules_messages
        $rules_msg = trans($trans_ns);
        if (! \is_array($rules_msg)) {
            $rules_msg = [];
        }
        $rules_msg_generic = trans('theme::generic');
        if (! \is_array($rules_msg_generic)) {
            $rules_msg_generic = [];
        }
        $msg = [];
        //$msg = \array_merge($msg,$rules_msg_generic);
        //$msg = \array_merge($msg, $rules_msg);
        $msg = \array_merge($msg, $rules_msg_fields);

        return $msg;
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return array
     */
    public function filters(Request $request = null):array {
        return [];
    }

    public function getXotModelName() {
        return collect(config('xra.model'))->search(static::$model);
    }

    public function indexNav(): ?\Illuminate\Contracts\Support\Renderable {
        return null;
    }

    public function getActions(array $params = []) {
        $panel = $this;
        $filters = [];
        extract($params);
        $actions = collect($this->actions())->filter(
            function ($item) use ($panel, $filters) {
                $item->getName();
                $res = true;
                foreach ($filters as $k => $v) {
                    if (! isset($item->$k)) {
                        $item->$k = false;
                    }
                    if ($item->$k != $v) {
                        return false;
                    }
                }

                return $res;
            }
        )->map(
            function ($item) use ($panel) {
                $item->setPanel($panel);

                return $item;
            }
        );

        return $actions;
    }

    public function containerActions(array $params = []) {
        $params['filters']['onContainer'] = true;

        return $this->getActions($params);
    }

    public function itemActions(array $params = []) {
        $params['filters']['onItem'] = true;

        return $this->getActions($params);
    }

    public function itemAction($act) {
        $itemActions = $this->itemActions();
        $itemAction = $itemActions->firstWhere('name', $act);
        if (! is_object($itemAction)) {
            dddx([
                'error' => 'nessuna azione con questo nome',
                'act' => $act,
                'this' => $this,
                'itemActions' => $itemActions,
            ]);
        }
        $itemAction->setPanel($this);

        return $itemAction;
    }

    public function containerAction($act) {
        $actions = $this->containerActions();
        $action = $actions->firstWhere('name', $act);
        if (! is_object($action)) {
            dddx([
                'error' => 'nessuna azione con questo nome',
                'act' => $act,
                'this' => $this,
                'Actions' => $actions,
            ]);
        }
        $action->setPanel($this);

        return $action;
    }

    public function urlContainerAction($act) {
        $containerActions = $this->containerActions();
        $containerAction = $containerActions->firstWhere('name', $act);
        if (is_object($containerAction)) {
            return $containerAction->urlContainer(['rows' => $this->rows, 'panel' => $this]);
        }
    }

    public function urlItemAction($act) {
        //$itemActions = $this->itemActions();
        //$itemAction = $itemActions->firstWhere('name', $act);
        $itemAction = $this->itemAction($act);
        if (is_object($itemAction)) {
            return $itemAction->urlItem(['row' => $this->row, 'panel' => $this]);
        }
    }

    public function btnItemAction($act) {
        //$itemActions = $this->itemActions();
        //$itemAction = $itemActions->firstWhere('name', $act);
        $itemAction = $this->itemAction($act);

        if (is_object($itemAction)) {
            return $itemAction->btn(['row' => $this->row]);
        }
    }

    /**
     * Build an "index" query for the given resource.
     *
     * @param mixed                               $data
     * @param \Illuminate\Database\Eloquent\Builder $query
     *
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public static function indexQuery(array $data,\Illuminate\Database\Eloquent\Builder $query):\Illuminate\Database\Eloquent\Builder {
        //return $query->where('auth_user_id', $request->user()->auth_user_id);
        return $query;
    }



    public function applyJoin($query) {
        $model = $query->getModel();
        if (method_exists($model, 'scopeWithPost')) {
            $query = $query->withPost('a');
        }

        return $query;
    }

    public function applyFilter($query, $filters) {
        //https://github.com/spatie/laravel-query-builder
        $lang = app()->getLocale();
        $filters_fields = $this->filters();

        $filters_rules = collect($filters_fields)->filter(function ($item) {
            return isset($item->rules);
        })->map(function ($item) {
            return [$item->param_name => $item->rules];
        })->collapse()
            ->all();

        $validator = Validator::make($filters, $filters_rules);
        if ($validator->fails()) {
            \Session::flash('error', 'error');
            $id = $query->getModel()->getKeyName();

            return $query->whereNull($id); //restituisco query vuota
        }

        $filters_fields = collect($filters_fields)->filter(function ($item) use ($filters) {
            return in_array($item->param_name, array_keys($filters));
        })
            ->all();

        foreach ($filters_fields as $k => $v) {
            $filter_val = $filters[$v->param_name];
            if ('' != $filter_val) {
                if (! isset($v->op)) {
                    $v->op = '=';
                }
                if (isset($v->where_method)) {
                    $query = $query->{$v->where_method}($v->field_name, $filter_val);
                } else {
                    $query = $query->where($v->field_name, $v->op, $filter_val);
                }
            }
        }

        return $query;
    }

    public function applySearch($query, $q) {
        $tipo = 0; //0 a mano , 1 repository, 2 = scout

        switch ($tipo) {
            case 0:
                $search_fields = $this->search(); //campi di ricerca
                if (0 == count($search_fields)) { //se non gli passo nulla, cerco in tutti i fillable
                    $search_fields = with(new $this::$model())->getFillable();
                }
                $table = with(new $this::$model())->getTable();
                if (strlen($q) > 1) {
                    $query->where(function ($subquery) use ($search_fields, $q, $table) {
                        foreach ($search_fields as $k => $v) {
                            /*
                            if (! Str::contains($v, '.')) {
                                $v = $table.'.'.$v;
                            }
                            */
                            if (Str::contains($v, '.')) {
                                [$rel, $rel_field] = explode('.', $v);
                                //dddx([$rel, $rel_field, $q]);
                                $subquery->orWhereHas($rel, function ($subquery1) use ($rel_field, $q) {
                                    $subquery1->where($rel_field, 'like', '%'.$q.'%');
                                });
                            } else {
                                $subquery->orWhere($v, 'like', '%'.$q.'%');
                            }
                        }
                    });
                }

                return $query;
                break;
            case 1:
                $repo = with(new \Modules\Food\Repositories\RestaurantRepository())->search('grom');
                //dddx($repo->paginate());
                return $repo;
                break;
            case 2:

                break;
        } //end switch
    }

    //end applySearch

    public function applySort($query, $sort) {
        if (! is_array($sort)) {
            return $query;
        }
        $column = $sort['by'];
        /*
        * valutare se mettere controllo se colonna e' sortable
        **/
        if ('' == $column) {
            return $query;
        }
        $direction = isset($sort['order']) ? $sort['order'] : 'asc';
        $tmp = explode('|', $column);
        if (count($tmp) > 1) {
            $column = $tmp[0];
            $direction = $tmp[1];
        }
        $query = $query->orderBy($column, $direction);

        return $query;
    }

    //-- da studiare --
    protected static function applySearchNova($query, $search) {
        return $query->where(function ($query) use ($search) {
            if (is_numeric($search) && in_array($query->getModel()->getKeyType(), ['int', 'integer'])) {
                $query->orWhere($query->getModel()->getQualifiedKeyName(), $search);
            }

            $model = $query->getModel();

            foreach (static::searchableColumns() as $column) {
                if (is_array($column)) {
                    foreach ($column as $key => $col) {
                        $column[$key] = $model->qualifyColumn($col);
                    }
                    $concat = implode(", ' ', ", $column);
                    $query->orWhereRaw('CONCAT('.$concat.") LIKE '%".$search."%'");
                } else {
                    $query->orWhere($model->qualifyColumn($column), 'like', '%'.$search.'%');
                }
            }
        });
    }

    public function formatItemData($item, $params) {
        if (null == $item) {
            return null;
        }
        extract($params);
        if (! isset($format)) {
            return null;
        }
        if ('json' == $format) {
            $transformer = StubService::fromModel(['model' => $item, 'stub' => 'transformer_resource']);

            return $item->toJson();
            //\Modules\Xot\Transformers\JsonResource::withoutWrapping();
            //return new \Modules\Xot\Transformers\JsonResource($item);
        }
        if ('geoJson' == $format) {
            $out = new \Modules\Geo\Transformers\GeoJsonResource($item);

            return $out;
        }

        return null;
    }

    public function formatData($data, $params) {
        if (null == $data) {
            return null;
        }
        extract($params);
        if (! isset($format)) {
            return null;
        }
        if ('json' == $format) { //potrei ficcare anche xls
            //dddx($this->option_id());
            //$res=$data->pluck('dest1','repar')->all();
            //dddx(get_class($data)); //Illuminate\Database\Eloquent\Builder
            //debug_getter_obj(['obj'=>$data]);
            $model = $data->getModel();
            //$transformer=getTransformerFromModel($model,'Collection');
            $transformer = StubService::fromModel(['model' => $model, 'stub' => 'transformer_collection']);
            //dddx($transformer); // Modules\Food\Transformers\LocationCollection
            //die(json_encode($res));
            $ris = $data->paginate(20);
            $this->force_exit = 1;
            //$this->out=json_encode($res);
            //$this->out=new \Modules\Progressioni\Transformers\ProgressioniCollection($ris);
            //$out = $ris->toJson();

            $out = new $transformer($ris);
            $this->out = $out;
            //$this->out=\Modules\Progressioni\Transformers\ProgressioniResource::collection($ris);
            return $out;
        }
        if ('datatables' == $format) {
            $model = $data->getModel();
            //$transformer = StubService::fromModel(['model' => $model, 'stub' => 'transformer_collection']);

            $this->force_exit = 1;
            $ris = $model->get();
            //$out = new $transformer($ris);
            $out = $model::all();
            //dddx($out);

            $this->out = Datatables::collection($out)->make(true);

            return $out;
        }
        if ('typeahead' == $format) {
            /*
            $ris=$data->select('area_id as id','area_define_name as label')
                        ->paginate(10);
            */
            $ris = $data->paginate(20);
            $this->force_exit = 1;
            $model_class = $this::$model;
            //dddx($model_class);//Modules\LU\Models\Area
            $model_class_name = class_basename($model_class);
            $module_ns = Str::before($model_class, '\\Models\\');
            $transformers_coll = $module_ns.'\\Transformers\\'.$model_class_name.'Collection';
            $transformers_res = $module_ns.'\\Transformers\\'.$model_class_name.'Resource';
            //Typeahead
            //dddx($transformers_coll);
            //$this->out=new $transformers_coll($ris);
            $this->out = $transformers_res::collection($ris);

            return $this->out;
        }
        if ('geoJson' == $format) {
            $this->force_exit = 1;
            /**
             * https://github.com/renelikestacos/Web-Mapping-Leaflet-NodeJS-Tutorials
             * https://github.com/shramov/leaflet-plugins/blob/master/examples/permalink.html.
             *
             **/
            //dddx('aaa');
            $cache_key = 'geoJson_6_'.Str::slug(url()->full());
            if ($cache_custom = 0) {
                if (! Storage::disk('cache')->exists($cache_key.'.json')) {
                    $lang = app()->getLocale();
                    $ris = $data
                        ->select('post.post_id', 'post_type', 'guid', 'latitude', 'longitude')
                        ->where('latitude', '!=', '')
                        //->where('lang', $lang)
                        ->paginate(200)
                        //->get()
                    ;
                    $out = new \Modules\Geo\Transformers\GeoJsonCollection($ris);
                    Storage::disk('cache')->put($cache_key.'.json', $out->toJson());
                } else {
                    $out = Storage::disk('cache')->get($cache_key.'.json');
                }
            }
            //*
            $minutes = 60 * 60 * 24;
            $out = Cache::store('file')->remember($cache_key, $minutes, function () use ($data) {
                $lang = app()->getLocale();
                $ris = $data
                    ->select('post.post_id', 'post_type', 'guid', 'latitude', 'longitude')
                    ->where('latitude', '!=', '')
                    ->where('lang', $lang)
                    ->paginate(500)
                    ->appends(\Request::input());
                $out = new \Modules\Geo\Transformers\GeoJsonCollection($ris);
                //$out=$out->toJson();

                return $out;
            });
            //*/
            $this->out = $out;

            return $out;
        }

        return null;
    }

    public function indexRows(Request $request, $query) {
        $data = $request->all();

        $filters = $data;
        $q = isset($data['q']) ? $data['q'] : null;
        $out_format = isset($data['format']) ? $data['format'] : null;
        $act = isset($data['_act']) ? $data['_act'] : null;

        $query = $query->with($this->with());
        $query = $this->indexQuery($request, $query);

        //$query=$query->withPost('a');
        $query = $this->applyJoin($query);
        $query = $this->applyFilter($query, $filters);
        $query = $this->applySearch($query, $q);

        //$this->callAction($query, $act);

        $formatted = $this->formatData($query, $data);
        $page = isset($data['page']) ? $data['page'] : 1;
        Cache::forever('page', $page);
        //dddx(Cache::get('page'));
        //session('page',$page);
        //Cookie::make('page', $page, 20);
        //dddx(Cookie::get('page'));
        return $query;
    }

    public function formCreate(array $params = []) {
        $fields = $this->getFields(['act'=>'create']);
        $row = $this->row;
        $res = '';
        //$res.='<h3>'.$this->url(['act'=>'store']).'</h3>'; //4 debug
        $res .= Form::bsOpenPanel($this, 'store');
        $res .= '<div class="clearfix">';
        foreach ($fields as $field) {
            $res .= ThemeService::inputHtml(['row' => $row, 'field' => $field]);
        }
        $res .= '</div>';
        //$res.=Form::bsSubmit('save');
        $res .= '<p class="form-submit">
            <input name="submit" type="submit" id="submit" value="Post your answer" class="button small color">
        </p>';
        $res .= Form::close();

        return $res;
    }

    public function formEdit(array $params = []) {
        $submit_btn = '<p class="form-submit">
            <input name="submit" type="submit" id="submit" value="Post your answer" class="button small color">
        </p>';
        extract($params);
        $fields = $this->getFields(['act'=>'edit']);
        $row = $this->row;
        $res = '';
        //$res.='<h3>'.$this->url(['act'=>'store']).'</h3>'; //4 debug
        $res .= Form::bsOpenPanel($this, 'update');
        $res .= '<div class="clearfix">';
        foreach ($fields as $field) {
            $res .= ThemeService::inputHtml(['row' => $row, 'field' => $field]);
        }
        $res .= '</div>';
        //$res.=Form::bsSubmit('save');
        $res .= $submit_btn;
        $res .= Form::close();

        return $res;
    }

    public function exceptFields(array $params = []) {
        extract($params);
        $excepts = collect([]);
        if (is_object($this->rows)) {
            $methods = [
                'getForeignKeyName',
                'getMorphType',
                //'getLocalKeyName',
                'getForeignPivotKeyName',
                'getRelatedPivotKeyName',
                'getRelatedKeyName',
            ];
            if ('index' != $act) { //nella lista voglio visualizzare l'id
                $methods[] = 'getLocalKeyName';
            }

            foreach ($methods as $method) {
                if (method_exists($this->rows, $method)) {
                    $excepts = $excepts->merge($this->rows->$method());
                }
            }
        }
        $excepts = $excepts->unique()->all();

        $fields = collect($this->fields())
            ->filter(
                function ($item) use ($excepts, $act) {
                    if (! isset($item->except)) {
                        $item->except = [];
                    }

                    //!in_array($item->type,['Password']) &&
                    return ! in_array($act, $item->except) &&
                        ! in_array($item->name, $excepts);
                }
            )->all();

        return $fields;
    }

    public function indexFields():array {
        $fields = $this->exceptFields(['act' => 'index']);

        return $fields;
    }

    public function createFields():array {
        $excepts = collect([]);
        /*
        $methods = collect(get_class_methods($this->rows))->filter(
            function ($item) {
                return Str::startsWith($item, 'get') && ! in_array($item,
                    [
                        'getRelationExistenceQuery',
                        'getRelationExistenceQueryForSelfRelation',
                        'getRelationExistenceCountQuery',
                        'getMorphedModel',
                    ]
                );
            }
        )->map(
            function ($item) {
                return (object) [
                    'name' => $item,
                    'res' => $this->rows->$item(),
                ];
            }
        )->all();
        */
        $fields = $this->exceptFields(['act' => 'create']);

        return $fields;
    }

    public function editFields():array {
        $fields = $this->exceptFields(['act' => 'edit']);

        return $fields;
    }

    public function indexEditFields():array {
        $fields = $this->exceptFields(['act' => 'index_edit']);

        return $fields;
    }

    /*
        -- in ingresso "qs" che e' array con le cose da aggiungere
    */
    public function addQuerystringsUrl(array $params){
        extract($params);

        return $request->fullUrlWithQuery($qs); // fa il merge in automatico
        /*
        $currentQueries = $request->query();
        //Declare new queries you want to append to string:
        //$newQueries = ['year' => date('Y')];
        //Merge together current and new query strings:
        $allQueries = array_merge($currentQueries, $qs);
        //Generate the URL with all the queries:
        return $request->fullUrlWithQuery($allQueries);
        */
    }

    //------- navigazioni ---

    public function yearNavRedirect() {
        $request = \Request::capture();
        $routename = \Route::currentRouteName();
        $params = optional(\Route::current())->parameters();

        $redirect = 1;
        if ('' == $request->year) {
            if ($redirect) {
                $t = $this->addQuerystringsUrl(['request' => $request, 'qs' => ['year' => date('Y')]]);
                $this->force_exit = true;
                $this->out = redirect($t);
                die($this->out); //forzatura

                return;
            }
            $request->year = date('Y');
        }

        $year = $request->year - 1;
        $nav = [];
        for ($i = 0; $i < 3; ++$i) {
            $tmp = [];
            $params['year'] = $year;
            $tmp['title'] = $year;
            if (date('Y') == $params['year']) {
                $tmp['title'] = '['.$tmp['title'].']';
            }
            if ($request->year == $params['year']) {
                $tmp['active'] = 1;
            } else {
                $tmp['active'] = 0;
            }
            $tmp['url'] = route($routename, $params);
            $nav[] = (object) $tmp;
            ++$year;
        }

        return $nav;
    }

    public function yearNav() {
        $request = \Request::capture();
        $routename = \Route::currentRouteName();
        $params = optional(\Route::current())->parameters();
        $year = $request->input('year', date('Y'));
        $year = $year - 1;
        $nav = [];
        for ($i = 0; $i < 3; ++$i) {
            $tmp = [];
            $params['year'] = $year;
            $tmp['title'] = $year;
            if (date('Y') == $params['year']) {
                $tmp['title'] = '['.$tmp['title'].']';
            }
            if ($request->year == $params['year']) {
                $tmp['active'] = 1;
            } else {
                $tmp['active'] = 0;
            }
            $tmp['url'] = route($routename, $params);
            $nav[] = (object) $tmp;
            ++$year;
        }

        return $nav;
    }

    public function monthYearNav() { //possiamo trasformarlo in una macro
        $request = \Request::capture();
        $routename = \Route::currentRouteName();
        $params = optional(\Route::current())->parameters();
        /*
        if ('' == $request->year) {
            $request->year = date('Y');
        }
        if ('' == $request->month) {
            $request->month = date('m');
        }
        */
        $q = 2;
        $d = Carbon::create($request->year, $request->month, 1)->subMonth($q);
        $nav = [];
        for ($i = 0; $i < ($q * 2) + 1; ++$i) {
            $tmp = [];
            $params['month'] = $d->format('m') * 1;
            $params['year'] = $d->format('Y') * 1;
            $tmp['title'] = $d->isoFormat('MMMM YYYY');
            if (date('Y') == $params['year'] && date('m') == $params['month']) {
                $tmp['title'] = '['.$tmp['title'].']';
            }
            if ($request->year == $params['year'] && $request->month == $params['month']) {
                $tmp['active'] = 1;
            } else {
                $tmp['active'] = 0;
            }
            $tmp['url'] = route($routename, $params);
            $nav[] = (object) $tmp;
            $d->addMonth();
        }

        return $nav;
        //$d->locale() //it !!
        /*
        return '';
        */
    }

    //-- nella registrazione 1 tasto, nelle modifiche 3
    public function btnSubmit() {
        //return Form::bsSubmit('save');
        return Form::bsSubmit(trans('xot::buttons.save'));
    }

    public function btnDelete(array $params = []) {
        $class = 'btn-primary mb-2';
        extract($params);
        //dddx($params);
        $act = 'destroy';
        $parz = [
            'id' => $this->row->getKey(),
            'btn_class' => 'btn '.$class,
            'route' => $this->url(['act' => 'destroy']),
            'act' => $act,
            'title' => $title,
        ];

        return view('formx::includes.components.btn.'.$act)->with($parz);
    }

    public function btnDetach(array $params = []) {
        $class = 'btn-primary mb-2';
        extract($params);
        $act = 'detach';
        $parz = [
            'id' => $this->row->getKey(),
            'btn_class' => 'btn '.$class,
            'route' => $this->url(['act'=>'detach']),
            'act' => $act,
        ];

        return view('formx::includes.components.btn.'.$act)->with($parz);
    }

    public function btnCrud(array $params = []) {
        extract($params);
        $acts = ['edit', 'destroy', 'show'];
        if (is_object($this->row->panel)) {
            $acts = ['edit', 'destroy', 'detach', 'show'];
        }

        $html = '';
        $params['title'] = '';
        foreach ($acts as $act) {
            $params['act'] = $act;
            $html .= $this->btnHtml($params);
        }
        $html = '<div role="group" aria-label="Actions" class="btn-group btn-group-sm">'.
            chr(13).$html.chr(13).'</div>';

        return $html;
    }

    public function btnHtml(array $params){
        $params['panel'] = $this;
        $params['url'] = RouteService::urlPanel($params);
        $params['method'] = Str::camel($params['act']);

        if (! isset($params['tooltip'])) {
            $row = $this->row;
            $module_name_low = strtolower(getModuleNameFromModel($row));
            $params['tooltip'] = trans($module_name_low.'::'.strtolower(class_basename($row)).'.act.'.$params['method']);
        }

        if (! isset($params['title'])) {
            $row = $this->row;
            $module_name_low = strtolower(getModuleNameFromModel($row));

            $trans_key = $module_name_low.'::'.strtolower(class_basename($row)).'.act.'.$params['method'];
            $trans = trans($trans_key);
            $title = $trans;
            if ($trans == $trans_key && ! config('xra.show_trans_key')) {
                $title = class_basename($row); //.' '.$params['method'];
            }

            $params['title'] = $title;
        }

        if (! isset($params['icon'])) {
            switch ($params['method']) {
                case 'create':
                    $params['icon'] = '<i class="far fa-plus-square"></i>';
                    break;
                case 'edit':
                    $params['icon'] = '<i class="far fa-edit"></i>';
                    break;
                case 'destroy':
                    $params['icon'] = '<i class="far fa-trash-alt"></i>';
                    break;
                case 'show':
                    $params['icon'] = '<i class="far fa-eye"></i>';
                    break;

                default:
                    //$params['icon'] = $params['method']; //per vedere quale
                    break;
            }
        }

        if (true === $params['title']) {
            $row = $this->row;
            $module_name_low = strtolower(getModuleNameFromModel($row));
            $parent = $this->getParent();
            if (null != $parent) {
                $tmp = [];
                $tmp[] = class_basename($parent->getRow());
                $tmp[] = class_basename($row);
                $tmp[] = 'act';
                $tmp[] = $params['method'];
                $tmp = collect($tmp)->map(function ($item) {
                    return Str::snake($item);
                })->implode('.');
                $params['title'] = trans($module_name_low.'::'.$tmp);
            } else {
                $params['title'] = trans($module_name_low.'::'.strtolower(class_basename($row)).'.act.'.$params['method']);
            }
        }

        return FormXService::btnHtml($params);
    }

    public function btn($act, $params = []) {
        extract($params);
        $parents = [];
        $parent = $this->parent;
        $route_params = optional(\Route::current())->parameters();
        $cont_i = RouteService::containerN(['model' => get_class($parent->getRow())]);
        $routename = RouteService::routenameN(['n' => $cont_i + 1, 'act' => $act]);

        $route_params['item'.($cont_i + 0)] = $this->parent->row;
        $route_params['container'.($cont_i + 1)] = $this->postType();
        $route_params['item'.($cont_i + 1)] = $this->row;
        $route = route($routename, $route_params);
        //http://multi.local:8080/it/profile/profile%20279656/restaurant/pizza%20gino/cuisine/antipasti/recipe/gigi]
        //return '['.$routename.']<br>['.$route.'][['.$cont_i.']';
        $parz = [
            'id' => $this->row->id,
            'btn_class' => 'btn',
            'route' => $route,
            'act' => $act,
        ];
        if (isset($modal) && $modal) {
            return view('formx::includes.components.btn.modal')->with($parz);
        }

        return view('formx::includes.components.btn.'.$act)->with($parz);
    }

    public function imageHtml(array $params){
        /*
        * mettere imageservice, o quello di spatie ?
        *
        **/
        $params['src'] = $this->row->image_src;
        $img = new ImageService($params);
        $src = $img->fit()->save()->src();

        return '<img src="'.asset($src).'" >';
    }

    public function imgSrc(array $params){
        $row = $this->row;
        $src = $row->image_src;

        $str0 = '/laravel-filemanager/';
        if (Str::startsWith($src, $str0)) {
            $src = '/'.Str::after($src, $str0);
        }
        $params['src'] = $src;
        extract($params);
        $images = $row->images;
        if (null == $images) {
            $images = $row->images();
        }
        $src = $src.'';
        $img = $images->where('src', $src)
            ->where('width', $width)
            ->where('height', $height)
            ->first();
        if (is_object($img)) {
            if (Str::startsWith($img->src_out, '\\')) {
                $img->src_out = Str::after($img->src_out, '\\');
                $img->save();
            }

            return $img->src_out;
        }
        $params['dirname'] = '/photos/'.$this->postType().'/'.$this->guid();
        //dddx($params);
        $img = new ImageService($params);
        $src_out = $img->fit()->save()->src();

        $row->images()->create([
            'src' => $src,
            'src_out' => $src_out,
            'width' => $width,
            'height' => $height,
        ]);
        //dddx($src_out);
        return $src_out;
    }

    public function microdataSchemaOrg() {
        return '';
    }

    public function show_ldJson() {
        return [];
    }

    public function langUrl($lang) {
        return '?'.$lang; //da fixare dopo
        //$row=$this->row;
        //$row->lang=$lang;
        //return '/wip'.$this->url();
        $route_name = \Route::currentRouteName();
        $route_params = optional(\Route::current())->parameters();
        $route_params['lang'] = $lang;
        [$containers, $items] = params2ContainerItem($route_params);
        $n_items = count($items);
        //dddx($n_items);//1
        //dddx($route_name); containers.show
        for ($i = 0; $i < $n_items; ++$i) {
            $v = $items[$i];
            if (method_exists($v, 'postLang')) {
                $tmp = $v->postLang($lang)->first();
                if (is_object($tmp)) {
                    $guid = $tmp->guid;
                } else {
                    $guid = '#';
                    //dddx(app()->getLocale());
                    $v_post = $v->post;
                    if (null == $v_post) {
                        break;
                    }
                    $new_post = $v_post->replicate();
                    $fields = ['title', 'subtitle', 'txt', 'meta_description', 'meta_keywords'];
                    foreach ($fields as $field) {
                        $trans = ImportService::trans(['q' => $new_post->$field, 'from' => app()->getLocale(), 'to' => $lang]);
                        /*
                        dddx([
                            'from'=>app()->getLocale(),
                            'to'=>$lang,
                            'trans'=>$trans,

                        ]);
                        */
                        $new_post->$field = $trans;
                    }
                    $new_post->lang = $lang;
                    $new_post->save();
                    $guid = $new_post->guid;
                }
            } else {
                $route_key_name = $v->getRouteKeyName();
                $guid = $v->$route_key_name;
            }

            $route_params['item'.$i] = $guid;
            //dddx($route_params['item'.$i]->guidLang);
        }
        //dddx($route_params);
        //return '/wip['.__LINE__.']['.__FILE__.']';
        try {
            return route($route_name, $route_params);
        } catch (\Exception $e) {
            return url($lang);
        }
    }

    public function relatedUrlRecursive(array $params){
        $obj = $this;
        $items = [];
        $items[] = $this;
        while (isset($obj->parent)) {
            $items[] = $obj->parent;
            $obj = $obj->parent;
        }

        $count = count($items);
        $parz = [];
        $routename = [];
        for ($i = 0; $i < $count; ++$i) {
            $j = $count - $i - 1;
            $parz['container'.$i] = $items[$j]->postType();
            $parz['item'.$i] = $items[$j]->row;
            $routename[] = 'container'.$i;
        }
        $parz['container'.$count] = $params['related_name'];
        $parz['lang'] = app()->getLocale();
        $routename[] = 'container'.$i;
        $routename = implode('.', $routename).'.'.$params['act'];
        $route = route($routename, $parz);

        return $route;
    }

    public function relatedUrl(array $params){
        /*
        $params['row'] = $this->row;
        return RouteService::urlRelated($params);
        */
        $params['panel'] = $this;

        return RouteService::urlRelatedPanel($params);
    }

    public function relatedName($name, $id = null) {
        //bell_boy => Modules\Food\Models\BellBoy
        $model = xotModel($name);
        if (null != $id) {
            $model = $model->find($id);
        }
        $panel = Panel::get($model);
        if (! is_object($panel)) {
            //dddx($model);
            return null;
        }
        $panel = $panel->setParent($this);

        return $panel;
    }

    public function url(array $params = []) {
        $act = 'show';
        extract($params);

        return RouteService::urlPanel(['panel' => $this, 'act' => $act]);
    }

    public function indexUrl() {
        //$url = RouteService::urlModel(['model' => $this->row, 'panel_parent' => $this->parent, 'act' => 'index']);
        $url = RouteService::urlPanel(['panel' => $this, 'act' => 'index']);

        $data = [];
        $filters = $this->filters();

        foreach ($filters as $k => $v) {
            $field_value = $this->row->{$v->field_name};
            if (! isset($v->where_method)) {
                $v->where_method = 'where';
            }
            $where = Str::after($v->where_method, 'where');

            $filters[$k]->field_value = $field_value;
            switch ($where) {
                case 'Year':
                    $value = $field_value->year;
                    break;
                case 'ofYear':
                    $value = \Request::input('year', date('Y'));
                    break;
                case 'Month':
                    $value = $field_value->month;
                    break;
                default:
                    $value = $field_value;
                    break;
            }
            $filters[$k]->value = $value;
        }
        $queries = collect($filters)->pluck('value', 'param_name')->all();
        $node = class_basename($this->row).'-'.$this->row->getKey();
        $queries['page'] = Cache::get('page');

        $queries = array_merge(request()->query(), $queries);
        $queries = collect($queries)->except(['_act'])->all();
        $url = (url_queries($queries, $url)).'#'.$node;

        return $url;
    }

    /*
    public function postType(){
        $models=config('xra.model');
        $post_type=collect($models)->search(static::$model);
        if($post_type==''){
            $post_type=Str::snake(class_basename(static::$model));
        }
        return $post_type;
    }*/

    public function postType() {
        $post_type = collect(config('xra.model'))->search(get_class($this->row));
        if (false === $post_type) {
            $post_type = snake_case(class_basename($this->row));
        }

        return $post_type;
    }

    public function guid() {
        $row = $this->row;
        $key = $row->getRouteKeyName();
        $msg = [
            'key' => $key,
            '$row->getKey()' => $row->getKey(),
            '$row->getKeyName()' => $row->getKeyName(),
            '$row->primary_key' => $row->primaryKey,
            '$row->$key' => $row->$key,
            '$row->post' => $row->post,
            '$row' => $row,
        ];
        if (null == $row->getKey()) {
            return null;
        }
        $guid = $row->$key;
        if ('' == $guid && method_exists($row, 'post') && $key = 'guid') {
            if ('' == $row->id && '' != $row->post_id) {
                $row->id = $row->post_id; //finche netson non riabilita migrazioni
            }
            try {
                return $row->post->guid;
            } catch (\Exception $e) {
                $title = $this->postType().' '.$this->row->getKey();

                $post = $row->post()->firstOrCreate(
                    [
                        'lang' => app()->getLocale(),
                    ],
                    [
                        'title' => $title,
                        'guid' => Str::slug($title),
                    ]
                );

                return $post->guid;
            }
        }

        return $guid;
    }

    /*
    public function getTitle() {
       $name = $this->getName();
       //$title = str_replace('_', ' ', $title);
       $row = $this->panel->getRow();

       $module_name_low = strtolower(getModuleNameFromModel($row));
       $title = trans($module_name_low.'::'.strtolower(class_basename($row)).'.act.'.$name);

       return $title;
    }
    */

    public function getItemTabs() {
        $item = $this->row;
        $tabs = $this->tabs();
        $routename = \Route::currentRouteName();
        $act = last(explode('.', $routename));
        $row = [];
        foreach ($tabs as $tab) {
            $tmp = new \stdClass();
            $tmp->title = $tab;

            if (in_array($act, ['index_edit', 'edit', 'update'])) {
                $tab_act = 'index_edit';
            } else {
                $tab_act = 'index';
            }
            $tmp->url = RouteService::urlRelated(['row' => $item, 'related_name' => $tab, 'act' => $tab_act]);
            $tmp->active = false; //in_array($tab,$containers);
            $row[] = $tmp;
        }

        return [$row];
    }

    public function getRowTabs() {
        $data = [];
        foreach ($this->tabs() as $tab) {
            $tmp = (object) [];
            $tmp->title = $tab;
            $tmp->url = $this->relatedUrl(['related_name' => $tab, 'act' => 'index']);
            $tmp->index_edit_url = $this->relatedUrl(['related_name' => $tab, 'act' => 'index_edit']);
            $tmp->create_url = $this->relatedUrl(['related_name' => $tab, 'act' => 'create']);
            $tmp->active = false;
            $data[] = $tmp;
        }

        return $data;
    }

    public function getTabs() {
        $request = \Request::capture();
        $routename = \Route::currentRouteName();
        $act = last(explode('.', $routename));
        //$routename = \Route::current()->getName();
        $route_params = optional(\Route::current())->parameters();
        [$containers, $items] = params2ContainerItem($route_params);
        $data = [];
        //$items[]=$this->row;
        if (! is_array($items)) {
            return [];
        }
        //array_unique($items);
        $parents = $this->getParents();
        if ('' != $this->guid()) {
            $parents->push($this);
        }
        //dddx($parents);

        foreach ($parents as $k => $panel) {
            //$item = $panel->getRow();
            $tabs = [];
            if (! is_object($panel)) {
                return $tabs;
            }
            $tabs = $panel->tabs();
            $row = [];
            //*
            if (0 == $k) {
                if (Gate::allows('index', $panel)) {
                    $tmp = new \stdClass();
                    $tmp->title = '<< Back '; //.'['.get_class($item).']';
                    $tmp->url = $panel->url(['act'=>'index']);
                    $tmp->active = false;
                    $row[] = $tmp;
                }
                //-----------------------
                $tmp = new \stdClass();
                if (in_array($act, ['index_edit', 'edit', 'update'])) {
                    $url = $panel->url(['act'=>'edit']);
                } else {
                    $url = $panel->url(['act'=>'show']);
                }
                $tmp->url = $url;
                $tmp->title = 'Content '; //.'['.request()->url().']['.$url.']';
                if ($url_test = 1) {
                    $tmp->active = request()->url() == $url;
                } else {
                    $tmp->active = request()->routeIs('admin.container0.'.$act);
                }
                if (null != $panel->guid()) {
                    $row[] = $tmp;
                }
                //----------------------
            }
            //*/
            foreach ($tabs as $tab) {
                $tmp = new \stdClass();
                $tmp->title = $tab;
                $tmp->panel = $panel;

                if (in_array($act, ['index_edit', 'edit', 'update'])) {
                    $tab_act = 'index_edit';
                } else {
                    $tab_act = 'index';
                }
                $tmp->url = $panel->relatedUrl(['related_name' => $tab, 'act' => $tab_act]);
                $tmp->active = in_array($tab, $containers);
                $row[] = $tmp;
            }
            $data[] = $row;
        }

        return $data;
    }

    public function rows($data = null) {
        if (null == $data) {
            $data = request()->all();
        }
        $filters = $data;
        $q = isset($data['q']) ? $data['q'] : null;
        $out_format = isset($data['format']) ? $data['format'] : null;
        $sort = isset($data['sort']) ? $data['sort'] : null;
        //$act = isset($data['_act']) ? $data['_act'] : null;
        $query = $this->rows;
        if (! is_object($query)) {
            if (! is_object($this->row)) {
                return $query;
            }
            $query = $this->row;
        }
        //dddx(get_class($this));
        $with = $this->with();
        if (! is_array($with)) {
            $msg = [
                'class' => get_class($this),
                'with' => $with,
            ];
            dddx($with);
        }
        $query = $query->with($with);
        $query = $this->indexQuery($data, $query);

        //$query=$query->withPost('a');
        $query = $this->applyJoin($query);
        $query = $this->applyFilter($query, $filters);
        $query = $this->applySearch($query, $q);
        $query = $this->applySort($query, $sort);
        $page = isset($data['page']) ? $data['page'] : 1;
        Cache::forever('page', $page);
        /*
        $this->callAction($query, $act);

        $formatted = $this->formatData($query, $data);
        $query=$query->paginate(20);
        return $query;
        */
        return $query;
    }

    public function callItemActionWithGate($act) {
        //$actions = $this->actions();
        //dddx([get_class($this), $actions]);

        return $this->callItemAction($act);
    }

    public function callAction($act) {
        $action = $this->getActions()
            ->firstWhere('name', $act);

        if (! is_object($action)) {
            abort(403, 'action '.$act.' not recognized');
        }

        $action->setRow($this->row);
        $rows = $this->rows();
        $action->setRows($rows);

        $action->setPanel($this);

        $method = request()->getMethod();
        if ('GET' == $method) {
            return  $action->handle();
        } else {
            return $action->postHandle();
        }
    }

    public function callItemAction($act) {
        if (null == $act) {
            return null;
        }
        $action = $this->itemActions()
            ->firstWhere('name', $act);
        if (! is_object($action)) {
            return null;
        }
        $action->setRow($this->row);
        $action->setPanel($this);
        $method = request()->getMethod();
        if ('GET' == $method) {
            $out = $action->handle();
        } else {
            $out = $action->postHandle();
        }

        return $out;
    }

    public function callContainerAction($act) {
        if (null == $act) {
            return null;
        }
        $action = $this->containerActions()
            ->firstWhere('name', $act);
        if (! is_object($action)) {
            abort(403, 'action '.$act.' not recognized');
        }

        $data = request()->all();
        $rows = $this->rows($data);
        $action->setRows($rows);
        $action->setPanel($this);
        $method = request()->getMethod();
        if ('GET' == $method) {
            $out = $action->handle();
        } else {
            $out = $action->postHandle();
        }

        return $out;
    }

    public function out(array $params = []) {
        return $this->view();
    }

    public function out_old(array $params = []) {
        //--- default vars ---//
        $is_ajax = false;
        $method = 'GET';
        $act = null;
        $out_format = null;
        extract($params);
        $data = request()->all();
        $rows = $this->rows($data);
        if (isset($data['_act'])) {
            $act = $data['_act'];
        }
        if (isset($data['format'])) {
            $out_format = $data['format'];
        }
        //$act = isset($data['_act']) ? $data['_act'] : null;
        //$out_format = isset($data['format']) ? $data['format'] : null;

        $html = $this->callItemAction($act);
        if (null == $html) {
            $html = $this->callContainerAction($act);
        }
        if (null == $html) {
            $html = $this->formatData($rows, $data); //formatContainerData
        }
        if (null == $html) {
            $html = $this->formatItemData($this->row, $data);
        }
        $view = ThemeService::getView();
        $view_work = ThemeService::getViewWork();
        if (null == $html) {
            $with = [
                'row' => $this->row,
                '_panel' => $this,
            ];
            if (is_object($rows)) {
                //$related=$rows->getRelated();
                $related = $rows->getModel(); //builder
                $morph_map = [$related->post_type => get_class($related)];
                //dddx($morph_map);
                \Illuminate\Database\Eloquent\Relations\Relation::morphMap($morph_map);
                $with['rows'] = $rows->paginate(20);
            }
            $html = ThemeService::view()
                ->with($with);
        }

        if ($is_ajax && null == $out_format) {
            \Debugbar::disable();

            return response()->json(
                [
                    'msg' => 'ok',
                    'html' => (string) $html,
                    'view' => $view,
                    'view_work' => $view_work,
                ]
            );
        }

        //dddx($html);

        return $html;
    }

    public function pdfFilename(array $params = []) {
        $fields = ['matr', 'cognome', 'nome', 'anno'];
        extract($params);
        $filename_arr = [];
        $filename_arr[] = $this->postType();
        $filename_arr[] = $this->guid();
        foreach ($fields as $field) {
            if (isset($this->row->$field)) {
                $filename_arr[] = $this->row->$field;
            }
        }
        $filename_arr[] = date('Ymd');
        $filename = implode('_', $filename_arr);
        if (request()->input('debug')) {
            $filename .= '.html';
        } else {
            $filename .= '.pdf';
        }

        return $filename;
    }

    public function pdf(array $params = []) {
        if (! isset($params['view_params'])) {
            $params['view_params'] = [];
        }
        $view = ThemeService::getView(); //progressioni::admin.schede.show
        $view .= '.pdf';
        $view = str_replace('.store.', '.show.', $view);
        extract($params);

        $html = view($view)
            ->with('view', $view)
            ->with('row', $this->row)
            ->with('rows', $this->rows)
            ->with($params['view_params']);

        //dddx($this->rows->get());
        if (request()->input('debug')) {
            return $html;
        }
        $params['html'] = (string) $html;

        return HtmlService::toPdf($params);
    }

    public static function getInstance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    public function related($relationship) {
        $related = $this->row->$relationship()->getRelated();
        $panel_related = Panel::get($related);
        $panel_related->setParent($this);

        return $panel_related;
    }

    public function getModuleName() {
        $model = $this::$model;
        $module_name = Str::before(Str::after($model, 'Modules\\'), '\\Models\\');
        //$module_name = Str::lower($module_name);

        return $module_name;
    }

    public function getModuleNameLow() {
        return Str::lower($this->getModuleName());
    }

    public function breadcrumbs() {
        $curr = $this;
        $parents = [];
        while (null != $curr) {
            $parents[] = $curr;
            $curr = $curr->getParent();
        }
        $bread = [];
        $tmp = (object) [];
        $tmp->url = asset(app()->getLocale());
        $tmp->title = 'Home';
        $tmp->obj = \Theme::xotModel('home');
        $tmp->method = 'index';
        $bread[] = $tmp;
        foreach ($parents as $parent) {
            $tmp = (object) [];
            $tmp->url = $parent->url(['act'=>'index']);
            $tmp->title = $parent->postType();
            $tmp->obj = \Theme::xotModel($tmp->title);
            $tmp->method = 'index';
            $bread[] = $tmp;
            try {
                $tmp = (object) [];
                $tmp->url = $parent->url(['act'=>'show']);
                $tmp->title = $parent->getRow()->title;
                $tmp->obj = \Theme::xotModel($parent->postType());
                $tmp->method = 'show';
                $bread[] = $tmp;
            } catch (\exception $e) {
            }
        }
        //dddx($bread);

        return $bread;
    }

    public function getExcerpt($length = 225) {
        $row = $this->row;
        //$content = $row->subtitle ?? $row->txt;

        if ($row->subtitle) {
            $content = $row->subtitle;
        } else {
            $content = $row->txt;
        }

        $cleaned = strip_tags(
            preg_replace(['/<pre>[\w\W]*?<\/pre>/', '/<h\d>[\w\W]*?<\/h\d>/'], '', $content),
            '<code>'
        );
        $truncated = substr($cleaned, 0, $length);

        if (substr_count($truncated, '<code>') > substr_count($truncated, '</code>')) {
            $truncated .= '</code>';
        }

        return strlen($cleaned) > $length
            ? preg_replace('/\s+?(\S+)?$/', '', $truncated).'...'
            : $cleaned;
    }

    public function indexEditSubs() {
        return [];
    }

    public function swiperItem() {
        return 'pub_theme::layouts.swiper.item';
    }

    public function dataTable() {
        /*
        if (request()->ajax()) {
            //$users=User::query();
            $users = \DB::table('users')->select('*');
            return DataTables::of($users)->toJson();
        }
        $htmlBuilder = app(\Yajra\DataTables\Html\Builder::class);
        //$htmlBuilder->of(\DB::table('users')->select('*'));
        //dddx($htmlBuilder);
        $dataTable = $htmlBuilder
            ->addColumn(['data' => 'id', 'name' => 'id', 'title' => 'Id'])
            ->addColumn(['data' => 'name', 'name' => 'name', 'title' => 'Name'])
            ->addColumn(['data' => 'email', 'name' => 'email', 'title' => 'Email'])
            ->addColumn(['data' => 'created_at', 'name' => 'created_at', 'title' => 'Created At'])
            ->addColumn(['data' => 'updated_at', 'name' => 'updated_at', 'title' => 'Updated At']);
        return $dataTable;
        //*/
        $builder = app('datatables.html');
        $html = $builder->columns(
            [
                ['data' => 'id', 'name' => 'id', 'title' => 'Id'],
                ['data' => 'name', 'name' => 'name', 'title' => 'Name'],
                ['data' => 'email', 'name' => 'email', 'title' => 'Email'],
                ['data' => 'created_at', 'name' => 'created_at', 'title' => 'Created At'],
                ['data' => 'updated_at', 'name' => 'updated_at', 'title' => 'Updated At'],
            ]
        )->ajax('datatables_url') //mettere una route che restituisca quello che vogliamo, prob la stessa con format=datatable
            /*->parameters(
                [
                    'ajax' => [
                        'url' => 'datatables_url',
                    ],
                ]
            )
            */;
        /*
        https://github.com/yajra/laravel-datatables/issues/1129
        */

        return $html;
        //dddx($builder);

        $users = \DB::table('users')->select('*');
        $datatables = app(DataTables::class);

        $datatables->of($users)->make(true);

        $html = $datatables->getHtmlBuilder();

        return $html;
    }

    public function view(array $params = null) {
        //$route_params = optional(\Route::current())->parameters();

        [$containers, $items] = params2ContainerItem();
        $view = ThemeService::getView(); //vew che dovrebbe essere
        $view_work = ThemeService::getViewWork(); //view effettiva
        $views = ThemeService::getDefaultViewArray(); //views possibili

        $mod_trad = $this->getModuleNameLow().'::'.last($containers);

        //--- per passare la view all'interno dei componenti
        \View::composer('*',
            function ($view_params) use ($view,$mod_trad) {
                \View::share('view', $view);
                $trad = implode('.', array_slice(explode('.', $view), 0, -1));
                \View::share('trad', $trad);
                \View::share('lang', \App::getLocale());
                //\View::share('mod_trad', $mod_trad);
            }
        );

        $modal = null;
        if (\Request::ajax()) {
            $modal = 'ajax';
        } elseif ('iframe' == \Request::input('format')) {
            $modal = 'iframe';
        }

        $rows = $this->rows()->paginate(10);

        $view_params = [
            'view' => $view,
            'view_work' => $view_work,
            'views' => $views,
            '_panel' => $this,
            'row' => $this->row,
            'rows' => $rows,
            'mod_trad' => $mod_trad,
            'trad_mod' => $mod_trad, /// da sostiutire ed uccidere
            'params' => optional(\Route::current())->parameters(),
            'routename' => \Route::current()->getName(),
            'modal' => $modal,
            'containers' => $containers,
            'items' => $items,
        ];

        return view($view_work)->with($view_params);
    }
}
