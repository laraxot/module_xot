<?php

namespace Modules\Xot\Contracts;

/**
 * Interface CrudContract.
 */
interface CrudContract {
    /**
     * Return the Eloquent model from the service.
     *
     * @return object|null
     */
    public function raw();

    /**
     * Include your where statement here with variable parameters.
     *
     * @param mixed $params
     *
     * @return iterable|null
     */
    public function where(...$params);

    /**
     * Get a single item or a collection of items.
     * Alias of find method when used with ID.
     *
     * @param int $id
     *
     * @return object|null
     */
    public function get($id = null);

    /**
     * Returns the first row of the selected resource.
     *
     * @return object
     */
    public function first();

    /**
     * Get a single item.
     *
     * @return object|null
     */
    public function find(int $id);

    /**
     * Paginate collection result.
     *
     * @param int $perPage defines the number of items per page
     *
     * @return iterable|null
     */
    public function paginate(int $perPage);

    /**
     * Get single item or all items from trash if ID is null.
     *
     * @param int $id
     *
     * @return object|null
     */
    public function getTrash($id = null);

    /**
     * Get single trashed item.
     *
     * @return object|null
     */
    public function getTrashedItem(int $id);

    /**
     * Set the related data that should be eager loaded.
     *
     * @return iterable
     */
    public function setRelation(array $relation);

    /**
     * Synonymous for setRelation but accepts strings as well as arrays.
     *
     * @param string|array $relations
     */
    public function with($relations);

    /**
     * Use ordering in your query.
     *
     * @param string $field ordering field
     * @param string $order ordering direction asc is default
     */
    public function orderBy(string $field, $order = 'asc');

    /**
     * Create new entry.
     */
    public function create(array $data);

    /**
     * Update model. Make sure fillable is set on the model.
     *
     * @param int   $id           of model you want to update
     * @param array $data         of model data that should be updated
     * @param bool  $return_model set to true if you need a model instance back
     */
    public function update(int $id, array $data, $return_model = false);

    /**
     * Delete item either by softdelete or harddelete.
     *
     * @param bool $hardDelete
     */
    public function delete(int $id, $hardDelete = false);

    /**
     * Restore a soft deleted model.
     */
    public function restore(int $id);

    /**
     * Set hasMany relationship by adding the related model, data and
     * relation name.
     */
    public function withHasMany(array $data, string $relatedModel, string $relation);

    /**
     * Add the belongsToMany relationship data to be synced and define
     * the relationship name.
     */
    public function withBelongsToMany(array $data, string $relation);

    /**
     * Handle a file or photo upload.
     *
     * @param string $field_name   upload field name
     * @param string $folder       storage folder
     * @param string $storage_disk storage disk to be used
     * @param bool   $randomize    to randomize the filename
     *
     * @return string filename
     */
    public function handleUpload(\Illuminate\Http\Request $request, $field_name = 'photo', $folder = 'images', $storage_disk = 'public', $randomize = true);
}